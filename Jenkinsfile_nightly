#!groovy

properties([
  pipelineTriggers([cron('H 13 * * 1-5')]),
  copyArtifactPermission('/HMCTS_a_to_c_Nightly/civil-wa-task-configuration/*'),
  parameters([
    choice(name: 'FORCE_GREEN_BUILD', choices: ['false', 'true'], 
      description: 'Should force pipeline to go green by not running any functional tests'),
    choice(name: 'RUN_PREV_FAILED_AND_NOT_EXECUTED_TEST_FILES', choices: ['false', 'true'], 
      description: 'Runs the failed test files and test files that were not executed, contained within the \'testFilesReport.json\', from the latest previous pipeline run'),
    choice(name: 'ENVIRONMENT', choices: ['aat', 'demo', 'preview'], 
      description: 'Environment to test'),
    choice(name: 'FRONTEND_URL', 
      choices: [
                  'https://manage-case.aat.platform.hmcts.net', 
                  'https://manage-case.demo.platform.hmcts.net',
                  'https://manage-case-int.demo.platform.hmcts.net',
                  'https://manage-case-int1.demo.platform.hmcts.net',
                  'https://manage-case-int2.demo.platform.hmcts.net',
                  'https://manage-case-wa-int.demo.platform.hmcts.net',
                  'https://manage-case-caa-assigned-case-view.demo.platform.hmcts.net'
                ],
      description: 'The URL you want to run the full functional tests against'),
    choice(name: 'IDAM_API_URL', choices: ['https://idam-api.aat.platform.hmcts.net', 'https://idam-api.demo.platform.hmcts.net'], 
      description: 'The URL of idam api'),
    choice(name: 'DM_STORE_URL', choices: ['http://dm-store-aat.service.core-compute-aat.internal', 'http://dm-store-demo.service.core-compute-demo.internal'], 
      description: 'The URL of dm store'),
    choice(name: 'SERVICE_AUTH_PROVIDER_API_BASE_URL', choices: ['http://rpe-service-auth-provider-aat.service.core-compute-aat.internal', 'http://rpe-service-auth-provider-demo.service.core-compute-demo.internal'], 
      description: 'The URL of service auth provider'),
    choice(name: 'CCD_DATA_STORE_URL', choices: ['http://ccd-data-store-api-aat.service.core-compute-aat.internal', 'http://ccd-data-store-api-demo.service.core-compute-demo.internal'], 
      description: 'The URL of ccd data store'),
    choice(name: 'CIVIL_SERVICE_URL', choices: ['http://civil-service-aat.service.core-compute-aat.internal', 'http://civil-service-demo.service.core-compute-demo.internal'],
      description: 'The URL of civil service'),
    choice(name: 'CIVIL_GENERAL_APPLICATIONS_URL', choices: ['http://civil-general-applications-aat.service.core-compute-aat.internal', 'http://civil-general-applications-demo.service.core-compute-demo.internal'],
      description: 'The URL of GA service'),
    choice(name: 'WA_TASK_MGMT_URL', choices: ['http://wa-task-management-api-aat.service.core-compute-aat.internal', 'http://wa-task-management-api-demo.service.core-compute-demo.internal'],
       description: 'The URL of wa task management'),
    string(name: 'WAIT_FOR_TIMEOUT_MS',
      defaultValue: '120000',
      description: 'Functional tests waitForTimeout value')
  ])
])

@Library("Infrastructure")

def type = "java"
def product = "civil"
def component = "task-configuration"
def s2sServiceName = "wa_camunda_pipeline_upload"
def ccdBranch = "master"

def yarnBuilder = new uk.gov.hmcts.contino.YarnBuilder(this)

static Map<String, Object> secret(String secretName, String envVariable) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   envVariable: envVariable
  ]
}

def copyPrevFailedAndNotExecutedTestFilesJson() {
  def buildFound = false
  def buildNumber = currentBuild.previousBuild ? currentBuild.previousBuild.number : 0
  def minBuildNumber = ((buildNumber - 8) > 0) ? buildNumber - 8 : 0
  while (!buildFound && buildNumber > minBuildNumber) {
    try {
      copyArtifacts projectName: env.JOB_NAME, selector: specific("${buildNumber}"), filter: "test-results/functional/testFilesReport.json"
      buildFound = true
    } catch (Exception error) {
      echo "artifact not found: " + error.toString()
      buildNumber--
    }
  }
}

def secrets = [
  's2s-${env}': [
    secret('microservicekey-xui-webapp', 'XUI_S2S_SECRET'),
  ],
  'civil-${env}': [
    secret('microservicekey-civil-service', 'S2S_SECRET'),
    secret('default-password','DEFAULT_PASSWORD'),
    secret('judge-default-password','JUDGE_DEFAULT_PASSWORD'),
    secret('iac-default-password','IAC_DEFAULT_PASSWORD')
  ]
]

withNightlyPipeline(type, product, component) {
  env.FORCE_GREEN_BUILD=params.FORCE_GREEN_BUILD
  env.RUN_PREV_FAILED_AND_NOT_EXECUTED_TEST_FILES=params.RUN_PREV_FAILED_AND_NOT_EXECUTED_TEST_FILES
  env.TEST_URL = params.CIVIL_SERVICE_URL
  env.NIGHTLY_RUN = true
  env.TEST_EA_COURTS = true
  env.URL = params.FRONTEND_URL
  env.DM_STORE_URL=params.DM_STORE_URL
  env.IDAM_API_URL=params.IDAM_API_URL
  env.SERVICE_AUTH_PROVIDER_API_BASE_URL = params.SERVICE_AUTH_PROVIDER_API_BASE_URL
  env.CCD_DATA_STORE_URL = params.CCD_DATA_STORE_URL
  env.CIVIL_SERVICE_URL = params.CIVIL_SERVICE_URL
  env.CIVIL_GENERAL_APPLICATIONS_URL = params.CIVIL_GENERAL_APPLICATIONS_URL
  env.WAIT_FOR_TIMEOUT_MS = params.WAIT_FOR_TIMEOUT_MS
  env.WA_TASK_MGMT_URL = params.WA_TASK_MGMT_API
  env.TESTS_FOR_ACCESSIBILITY = false
  env.RUN_WA_API_TEST = true
  overrideVaultEnvironments([
    'aat': params.ENVIRONMENT
  ])
  loadVaultSecrets(secrets)

  boolean forceGreenBuild = env.FORCE_GREEN_BUILD.toBoolean();
  boolean runPrevFailedAndNotExecutedTestFiles = env.RUN_PREV_FAILED_AND_NOT_EXECUTED_TEST_FILES.toBoolean();

  enableFullFunctionalTest(200)

  if(!forceGreenBuild) {
    afterAlways('DependencyCheckNightly') {
      sh """
          ./bin/pull-latest-civil-ccd-files.sh ${ccdBranch}
      """
      yarnBuilder.yarn('yarn-update')
      yarnBuilder.yarn('install-dependencies')
    }

    before('fullFunctionalTest') {
      if(runPrevFailedAndNotExecutedTestFiles) {
        copyPrevFailedAndNotExecutedTestFilesJson()
      }
    }

    afterAlways('fullFunctionalTest') {
      archiveArtifacts allowEmptyArchive: true, artifacts: 'test-results/functional/**/*'
    }
  }
}

