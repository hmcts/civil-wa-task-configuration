#!groovy
properties([
  copyArtifactPermission('/HMCTS_a_to_c/civil-wa-task-configuration/*'),
]);

@Library('Infrastructure')
import uk.gov.hmcts.contino.GithubAPI

def type = "java"
def component = "task-configuration"
def branchesToSync = ['demo', 'perftest','ithc']
def product = "civil"
def ccdBranch = "DTSCCI-2920"
def camundaBranch = "master"
def waStandaloneBranch = "master"


def yarnBuilder = new uk.gov.hmcts.contino.YarnBuilder(this)

def copyPrevFailedAndNotExecutedTestFilesJson() {
  def buildFound = false
  def buildNumber = currentBuild.previousBuild ? currentBuild.previousBuild.number : 0
  def minBuildNumber = ((buildNumber - 8) > 0) ? buildNumber - 8 : 0
  while (!buildFound && buildNumber > minBuildNumber) {
    try {
      copyArtifacts projectName: env.JOB_NAME, selector: specific("${buildNumber}"), filter: "test-results/functional/testFilesReport.json"
      buildFound = true
    } catch (Exception error) {
      echo "artifact not found: " + error.toString()
      buildNumber--
    }
  }
}

def getFunctionalTestsGroups() {
  def githubApi = new GithubAPI(this)
  def functionalTestGroups = []
  for (label in githubApi.getLabelsbyPattern(env.BRANCH_NAME, "pr_ft_")) {
    functionalTestGroups.add(label.substring(6, label.length()))
  }
  return functionalTestGroups.join(",")
}

def checkForRunAllFunctionalTests(branch_name) {
  return new GithubAPI(this).getLabelsbyPattern(branch_name, "runAllFunctionalTests").contains("runAllFunctionalTests")
}

static Map<String, Object> secret(String secretName, String envVariable) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   envVariable: envVariable
  ]
}

def secrets = [
  'rpx-${env}': [
    secret('mc-s2s-client-secret','XUI_S2S_SECRET'),
  ],
  's2s-${env}': [
    secret('microservicekey-ccd-gw', 'CCD_API_GATEWAY_S2S_SECRET'),
    secret('microservicekey-ccd-data', 'CCD_DATA_STORE_S2S_SECRET'),
    secret('microservicekey-ccd-definition', 'CCD_DEFINITION_STORE_S2S_SECRET'),
    secret('microservicekey-ccd-admin', 'ADMIN_S2S_KEY')
  ],
  'ccd-${env}': [
    secret('ccd-api-gateway-oauth2-client-secret', 'CCD_API_GATEWAY_IDAM_CLIENT_SECRET'),
    secret('postcode-info-address-lookup-token', 'ADDRESS_LOOKUP_TOKEN'),
    secret('ccd-admin-web-oauth2-client-secret', 'ADMIN_WEB_IDAM_SECRET'),
    secret('idam-data-store-client-secret','IDAM_OAUTH2_DATA_STORE_CLIENT_SECRET'),
    secret('idam-data-store-system-user-username','IDAM_DATA_STORE_SYSTEM_USER_USERNAME'),
    secret('idam-data-store-system-user-password','IDAM_DATA_STORE_SYSTEM_USER_PASSWORD'),
    secret('microservicekey-ccd-gw', 'CCD_API_GATEWAY_S2S_KEY')
  ],
  'civil-${env}': [
    secret('microservicekey-civil-service', 'S2S_SECRET'),
    secret('ccd-importer-username', 'CCD_CONFIGURER_IMPORTER_USERNAME'),
    secret('ccd-importer-password', 'CCD_CONFIGURER_IMPORTER_PASSWORD'),
    secret('ccd-importer-username', 'DEFINITION_IMPORTER_USERNAME'),
    secret('ccd-importer-password', 'DEFINITION_IMPORTER_PASSWORD'),
    secret('postgres-user', 'POSTGRES_USER'),
    secret('postgres-password', 'POSTGRES_PASSWORD'),
    secret('default-password','DEFAULT_PASSWORD'),
    secret('judge-default-password','JUDGE_DEFAULT_PASSWORD'),
    secret('iac-default-password','IAC_DEFAULT_PASSWORD'),
    secret('system-update-user-password', 'SYSTEM_USER_PASSWORD')
  ],
  'civil-prod': [
    secret('microservicekey-civil-service', 'S2S_SECRET_PROD')
  ]
]


def secretsIthc = [
  's2s-${env}': [
    secret('microservicekey-ccd-gw', 'CCD_API_GATEWAY_S2S_SECRET'),
    secret('microservicekey-ccd-data', 'CCD_DATA_STORE_S2S_SECRET'),

  ],
  'ccd-${env}': [
    secret('ccd-api-gateway-oauth2-client-secret', 'CCD_API_GATEWAY_IDAM_CLIENT_SECRET'),
    secret('postcode-info-address-lookup-token', 'ADDRESS_LOOKUP_TOKEN'),
    secret('ccd-admin-web-oauth2-client-secret', 'ADMIN_WEB_IDAM_SECRET'),
    secret('idam-data-store-client-secret','IDAM_OAUTH2_DATA_STORE_CLIENT_SECRET'),
    secret('idam-data-store-system-user-username','IDAM_DATA_STORE_SYSTEM_USER_USERNAME'),
    secret('idam-data-store-system-user-password','IDAM_DATA_STORE_SYSTEM_USER_PASSWORD'),
    secret('microservicekey-ccd-gw', 'CCD_API_GATEWAY_S2S_KEY')
  ],
  'civil-ithc': [
    secret('microservicekey-civil-service', 'S2S_SECRET'),
  ]
]

def uploadDmnDiagrams(String env, String changeID) {
  dir("${WORKSPACE}/bin") {
    tenantId = "civil"
    product = "civil"
    sh """
      eval \$(./variables/load-${env}-environment-variables.sh ${changeID})
      ./import-dmn-diagram.sh ${WORKSPACE} ${env} ${tenantId} ${product}
    """
  }
}

withPipeline(type, product, component) {
  pipelineConf = config

  onPR {
    env.ENVIRONMENT = "preview"
    env.RUN_WA_API_TEST = true
    loadVaultSecrets(secrets)
    env.NODE_TLS_REJECT_UNAUTHORIZED = "0";
  }
  onMaster {
    env.ENVIRONMENT = "aat"
    env.RUN_WA_API_TEST = true
    loadVaultSecrets(secrets)
  }
  onDemo {
    env.ENVIRONMENT = 'demo'
    loadVaultSecrets(secrets)
  }

  onPerftest {
    env.ENVIRONMENT = 'perftest'
    loadVaultSecrets(secrets)
  }

  onIthc {
    env.ENVIRONMENT = 'ithc'
    loadVaultSecrets(secretsIthc)
  }


  syncBranchesWithMaster(branchesToSync)
  afterSuccess('checkout') {
    def subscription = 'nonprod'
    if ( env.ENVIRONMENT == 'ithc' || env.ENVIRONMENT == 'demo' || env.ENVIRONMENT == 'perftest') {
      withSubscription(subscription) {
        withTeamSecrets(pipelineConf, env.ENVIRONMENT) {
          uploadDmnDiagrams(env.ENVIRONMENT,'')
        }
      }
    }
  }

  before('smoketest:preview') {
    retry (3) {
    sh """
      eval \$(./bin/variables/load-preview-environment-variables.sh ${CHANGE_ID})
      ./bin/add-roles.sh
      ./bin/pull-latest-camunda-files.sh ${camundaBranch}
      ./bin/import-dmn-diagram.sh . civil civil preview
      ./bin/pull-latest-civil-ccd-files.sh ${ccdBranch}
      ./bin/import-ccd-definition.sh "-e *-prod.json,*HNL-nonprod.json,AuthorisationCaseType-shuttered.json"
      ./bin/pull-latest-camunda-wa-files.sh ${waStandaloneBranch}
    """
    }
    env.URL="https://xui-civil-task-configuration-pr-${CHANGE_ID}.preview.platform.hmcts.net"
    env.IDAM_API_URL = "https://idam-api.aat.platform.hmcts.net"
    env.SERVICE_AUTH_PROVIDER_API_BASE_URL = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
    env.CCD_DATA_STORE_URL = "https://ccd-data-store-api-civil-task-configuration-pr-${CHANGE_ID}.preview.platform.hmcts.net"
    env.DM_STORE_URL = "http://dm-store-aat.service.core-compute-aat.internal"
    env.CIVIL_SERVICE_URL="https://civil-task-configuration-pr-${CHANGE_ID}-civil-service.preview.platform.hmcts.net"
    env.WA_TASK_MGMT_URL="https://wa-task-mng-civil-task-configuration-pr-${CHANGE_ID}.preview.platform.hmcts.net"
    yarnBuilder.yarn('yarn-update')
    yarnBuilder.yarn('install-dependencies')
  }

  afterAlways('smoketest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'test-results/smokeTest/**/*'
  }

  before('functionalTest:preview') {
    uploadDmnDiagrams('preview',"${CHANGE_ID}")
    if(checkForRunAllFunctionalTests(env.BRANCH_NAME)) {
      env.RUN_ALL_FUNCTIONAL_TESTS = true
    } else {
      copyPrevFailedAndNotExecutedTestFilesJson();
    }
  }

  afterAlways('functionalTest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'test-results/functional/**/*'
  }

  before('smoketest:aat') {
    sh """
      eval \$(./bin/variables/load-aat-environment-variables.sh)
      ./bin/pull-latest-civil-ccd-files.sh ${ccdBranch}
    """
    env.URL="https://manage-case.aat.platform.hmcts.net"
    env.IDAM_API_URL = "https://idam-api.aat.platform.hmcts.net"
    env.SERVICE_AUTH_PROVIDER_API_BASE_URL = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
    env.CCD_DATA_STORE_URL = "http://ccd-data-store-api-aat.service.core-compute-aat.internal"
    env.DM_STORE_URL = "http://dm-store-aat.service.core-compute-aat.internal"
    env.CIVIL_SERVICE_URL="http://civil-service-aat.service.core-compute-aat.internal"
    env.WA_TASK_MGMT_URL="http://wa-task-management-api-aat.service.core-compute-aat.internal"
    yarnBuilder.yarn('yarn-update')
    yarnBuilder.yarn('install-dependencies')
  }

  afterAlways('smoketest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'test-results/smokeTest/**/*'
  }

  before('functionalTest:aat') {
    env.NODE_TLS_REJECT_UNAUTHORIZED = "0";
    uploadDmnDiagrams('aat','')
    copyPrevFailedAndNotExecutedTestFilesJson();
  }

  afterSuccess('functionalTest:aat') {
    //Release dmns on to prod
    uploadDmnDiagrams('prod', '')
  }

  afterAlways('functionalTest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'test-results/functional/**/*'
  }
}
