plugins {
  id 'application'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.0.12.RELEASE'
  id 'org.springframework.boot' version '2.7.18'
  id 'com.github.ben-manes.versions' version '0.43.0'
  id 'org.owasp.dependencycheck' version '9.0.4'
  id 'org.sonarqube' version '3.4.0.2513'
  id 'info.solidsoft.pitest' version '1.5.2'
  id 'io.freefair.lombok' version '5.3.3.3'
  id 'maven-publish'
}

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

allprojects {
  java {
    toolchain {
      languageVersion = JavaLanguageVersion.of(17)
    }
  }
}

lombok {
  config['config.stopBubbling'] = 'true'
  config['lombok.addLombokGeneratedAnnotation'] = 'true'
  config['lombok.anyConstructor.addConstructorProperties'] = 'true'
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }
}

tasks.withType(JavaCompile).configureEach {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

tasks.withType(Test).configureEach {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

test {
  failFast = true
}

checkstyle {
  maxWarnings = 0
  toolVersion = '11.0.1'
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

pmd {
  toolVersion = "6.18.0"
  sourceSets = [sourceSets.main]
  reportsDir = file("$project.buildDir/reports/pmd")
  // https://github.com/pmd/pmd/issues/876
  ruleSets = []
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

jacocoTestCoverageVerification {
  violationRules {
    rule {
      excludes = ["com.gargoylesoftware.htmlunit.javascript.host.css.StyleAttributes"]
    }
  }
}

jacocoTestReport {
  executionData(test)
  reports {
    xml.required = true
    csv.required = false
    xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

pitest {
  junit5PluginVersion = '0.12'
  targetClasses = ['uk.gov.hmcts.civil.taskconfiguration.*']
  excludedClasses = [
    'uk.gov.hmcts.civil.taskconfiguration.config.*',
    'uk.gov.hmcts.civil.taskconfiguration.Application'
  ]
  threads = 10
  outputFormats = ['XML', 'HTML']
  timestampedReports = false
  mutationThreshold = 80
}

project.tasks['pitest'].group = "Verification"


project.tasks['sonarqube'].dependsOn test, jacocoTestReport

sonarqube {
  properties {
    property "sonar.projectName", "civil-wa-task-configuration"
    property "sonar.projectKey", "civil-wa-task-configuration"
    property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.destination.path}"
    property "sonar.pitest.mode", "reuseReport"
    property "sonar.pitest.reportsDirectory", "build/reports/pitest"
    property "sonar.exclusions", "src/main/java/uk/gov/hmcts/civil/taskconfiguration/config/**," +
      "src/main/java/uk/gov/hmcts/civil/taskconfiguration/Application.java"
  }
}

tasks.register('awaitApplicationReadiness', Exec) {
  commandLine './bin/wait-for.sh'
  commandLine './bin/wait-for.sh', 'manage-case'
}

tasks.register('pullGeneralAppAsset', Exec) {
  commandLine './bin/pull-latest-general-app-ccd-files.sh', 'master'
}

tasks.register('lintUserInterfaceTests', Exec) {
  onlyIf {
    return System.env.ENVIRONMENT == 'preview'
  }
  commandLine '/usr/bin/yarn', '--silent', 'lint'
}

tasks.register('runSmokeTests', Exec) {
  commandLine '/usr/bin/yarn', '--silent', 'run', 'test:smoke'
}

tasks.register('runCivilCCDTaskTests', Exec) {
  onlyIf {
    return System.env.NIGHTLY_RUN != 'true'
  }
  commandLine './bin/run-civil-ccd-task-tests.sh'
}

tasks.register('runNightlyCivilCCDTaskTests', Exec) {
  onlyIf {
    return System.env.NIGHTLY_RUN == 'true'
  }
  commandLine './bin/run-nightly-civil-ccd-task-tests.sh'
}

tasks.register('runNightlyGenAppCCDTaskTests', Exec) {
  onlyIf {
    return System.env.ENVIRONMENT == 'demo'
  }
  commandLine '/usr/bin/yarn', '--silent', 'run', 'test:api-ga-wa'
}

static def inStrictOrder(Task... tasks) {
  for (int i = 0; i < tasks.size() - 1; i++) {
    tasks[i + 1].mustRunAfter(tasks[i])
  }
  return tasks
}

tasks.register('smoke') {
  dependsOn(inStrictOrder(awaitApplicationReadiness, runSmokeTests))
}

tasks.register('functional') {
  dependsOn(inStrictOrder(awaitApplicationReadiness, runNightlyCivilCCDTaskTests, runCivilCCDTaskTests,
    pullGeneralAppAsset, runNightlyGenAppCCDTaskTests))
}

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  suppressionFile = 'config/owasp/suppressions.xml'

  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
}

dependencyManagement {
  dependencies {
    // CVE-2018-10237 - Unbounded memory allocation
    dependencySet(group: 'com.google.guava', version: '32.1.1-jre') {
      entry 'guava'
    }

    dependencySet(group: 'ch.qos.logback', version: '1.2.13') {
      entry 'logback-classic'
      entry 'logback-core'
    }

    //Solves CVE-2023-35116
    dependency group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.20.0'
    dependency group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.20.0'
    dependency group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version:  '2.20'
  }
}

repositories {
  mavenLocal()
  mavenCentral()
  maven {
    url 'https://pkgs.dev.azure.com/hmcts/Artifacts/_packaging/hmcts-lib/maven/v1'
  }
}

def versions = [
  junit           : '5.9.2',
  junitPlatform   : '1.9.2',
  reformLogging   : '6.1.9',
  springBoot         : springBoot.class.package.implementationVersion,
  springfoxSwagger: '2.9.2',
  camunda         : '7.15.0',
  pitest          : '1.5.2',
  log4j           : '2.17.1'

]

ext.libraries = [
  junit5: [
    "org.junit.jupiter:junit-jupiter-api:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-engine:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-params:${versions.junit}",
    "org.junit.platform:junit-platform-commons:${versions.junitPlatform}",
    "org.junit.platform:junit-platform-engine:${versions.junitPlatform}"
  ]
]

dependencies {

  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'

  implementation group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger

  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: versions.reformLogging
  implementation group: 'com.github.hmcts.java-logging', name: 'logging-appinsights', version: versions.reformLogging
  implementation group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: '7.0.1'
  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.18.0'
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: '2.18.0'
  implementation group: 'org.yaml', name: 'snakeyaml', version: '2.0'
  implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: '9.0.106'
  implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-websocket', version: '10.1.42'

  implementation group: 'org.camunda.bpm', name: 'camunda-external-task-client', version: versions.camunda
  implementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: '5.8.1'
  implementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: '5.8.1'
  implementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: '5.8.1'
  implementation group: 'org.junit.jupiter', name: 'junit-jupiter', version:'5.8.1'
  implementation group: 'junit', name: 'junit', version: '4.13.1'
  implementation group: 'org.testng', name: 'testng', version :'7.11.0'
  implementation group: 'org.apache.commons', name: 'commons-csv', version: '1.12.0'

  annotationProcessor 'org.projectlombok:lombok:1.18.24'
  compileOnly 'org.projectlombok:lombok:1.18.24'

  testImplementation libraries.junit5
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
    exclude group: 'junit', module: 'junit'
  }

  testImplementation group: 'org.camunda.bpm.dmn', name: 'camunda-engine-dmn', version: versions.camunda
  testImplementation group: 'org.camunda.bpm.assert', name: 'camunda-bpm-assert', version: '8.0.0'
  testImplementation group: 'org.camunda.bpm', name: 'camunda-engine', version: versions.camunda
  testImplementation group: 'com.h2database', name: 'h2', version: '1.4.200'

  functionalTestImplementation sourceSets.main.runtimeClasspath
  smokeTestImplementation sourceSets.main.runtimeClasspath
}

mainClassName = 'uk.gov.hmcts.civil.taskconfiguration.Application'

bootJar {
  getArchiveFileName().set(provider {
    'civil-wa-task-configuration.jar'
  })

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

publishing {
  repositories {
    maven {
      name = "AzureArtifacts"
      url = uri("https://pkgs.dev.azure.com/hmcts/Artifacts/_packaging/hmcts-lib/maven/v1")
      credentials {
        username = System.getenv("AZURE_DEVOPS_ARTIFACT_USERNAME")
        password = System.getenv("AZURE_DEVOPS_ARTIFACT_TOKEN")
      }
    }
  }
}
